{"name":"node-fogbugz","tagline":"Talks to FogBugz' icky XML API for you","body":"# node-fogbugz [![npm version](https://badge.fury.io/js/fogbugz.svg)](http://badge.fury.io/js/fogbugz) [![Build Status](https://travis-ci.org/boneskull/node-fogbugz.png?branch=master)](https://travis-ci.org/boneskull/node-fogbugz) [![Code Climate](https://codeclimate.com/github/boneskull/node-fogbugz/badges/gpa.svg)](https://codeclimate.com/github/boneskull/node-fogbugz) [![Test Coverage](https://codeclimate.com/github/boneskull/node-fogbugz/badges/coverage.svg)](https://codeclimate.com/github/boneskull/node-fogbugz/coverage)\r\n\r\nLibrary providing FogBugz API functionality\r\n\r\n## Installation\r\n\r\n```shell\r\n$npm install fogbugz\r\n```\r\n\r\n## Configuration\r\n\r\nCreate a `fogbugz.conf.json` in your app's root directory.  It should look like this:\r\n\r\n```json\r\n{\r\n  \"host\": \"zzz.fogbugz.com\",\r\n  \"username\": \"zzz@yyy.com\",\r\n  \"password\": \"Password1\"\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar fogbugz = require('fogbugz');\r\nfogbugz.logon()\r\n .then(function() {\r\n   return fogbugz.getBug('12345');\r\n })\r\n .then(function(bug) {\r\n    console.log(bug.title);\r\n });\r\n```\r\n\r\n## API\r\n\r\n## fogbugz\r\n\r\n```js\r\nvar fogbugz = require('fogbugz');\r\n```\r\n\r\n#### fogbugz.forgetToken()\r\n\r\nForgets the stored token.\r\n\r\n#### fogbugz.setToken(token)\r\n\r\nManually sets a login token if you have one by some other means.\r\n\r\n> ##### Parameters\r\n\r\n> `token`:  *string*,  FogBugz API logon token\r\n\r\n#### fogbugz.logoff()\r\n\r\nAssuming you are logged in and have a cached token, this will log you out.\r\n\r\n> ##### Returns\r\n\r\n> *Function|promise|Q.promise*,  Promise\r\n\r\n#### fogbugz.logon()\r\n\r\nLogs you into FogBugz based on contents of `fogbugz.conf.json`.\r\n\r\n> ##### Returns\r\n\r\n> *Function|promise|Q.promise*,  Promise\r\n\r\n#### fogbugz.listFilters()\r\n\r\nRetrieves a list of Filters as an array.  Each item in the array is of type Filter.  Example:\r\n  \r\n```json\r\n[{\"name\": \"My Cases\", \"type\": \"builtin\", \"id\": \"ez\",\r\n\"url\": \"https://zzz.fogbugz.com/default.asp?pgx=LF&ixFilter=ez\"}),\r\n{\"name\": \"Inbox\", \"type\": \"builtin\", \"id\": \"inbox\",\r\n \"url\": \"https://zzz.fogbugz.com/default.asp?pgx=LF&ixFilter=inbox\"}]\r\n```\r\n\r\n> ##### Returns\r\n\r\n> *Function|promise|Q.promise*,  Promise\r\n\r\n#### fogbugz.setCurrentFilter(filter)\r\n\r\nSets the current Filter. Allows to call fogbugz.search() with an empty string\r\n as the 'query' paramenter to list all cases in the current filter.\r\n\r\n> ##### Parameters\r\n\r\n> `filter`:  *Filter|string*,  Filter object or string ID\r\n\r\n#### fogbugz.search(query, \\[cols\\], \\[max\\])\r\n\r\nPerforms a search against FogBugz's cases.  Promise resolves to a `Case` object or an array of `Case` objects.\r\n\r\n> ##### Parameters\r\n\r\n> `query`:  *string*,  Query string\r\n\r\n> `[cols]`:  *array*,  Fields to pull\r\n\r\n> `[max]`:  *number*,  Number of cases to get at once\r\n\r\n> ##### Returns\r\n\r\n> *Function|promise|Q.promise*,  Promise\r\n\r\n#### fogbugz.getBug(id, \\[cols\\])\r\n\r\nGets a bug by ID\r\n\r\n> ##### Parameters\r\n\r\n> `id`:  *string|number*,  ID of bug\r\n\r\n> `[cols]`:  *number*,  Cols to pull; defaults to everything\r\n\r\n### class fogbugz.Filter()\r\n\r\nFilter pseudoclass\r\n\r\n> ##### Parameters\r\n\r\n> `obj`:  *Object*,  Object representing Filter\r\n\r\n#### fogbugz.Filter.setCurrent()\r\n\r\nSets the current filter to be this Filter\r\n\r\n### class fogbugz.Case()\r\n\r\nCase pseudoclass.  Stores original case data from server in its `_raw` property.\r\n\r\n> ##### Parameters\r\n\r\n> `obj`:  *Object*,  Object representing Case\r\n\r\n## Author\r\n\r\n[Christopher Hiller](http://boneskull.com)\r\n\r\n## License\r\n\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}